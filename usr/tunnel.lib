#!/bin/bash -ex
#
# 2024-03-22
#
#
# Copyright (c) 2024, Kareem Missoumi
# All rights reserved.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.
#
#



function tunnel_pre_flight {
  binCheckCurl=$(command -v curl)
  binCheckJq=$(command -v jq)
  [[ -z ${SAUCE_USERNAME} || -z ${SAUCE_ACCESS_KEY} || -z ${SAUCE_REGION} ]] && printf '\nPlease set environment variables for "SAUCE_USERNAME", "SAUCE_ACCESS_KEY", and "SAUCE_REGION".\n' && return 2
  [[ -z ${SAUCE_TUNNEL_NAME} ]] && printf '\nPlease set environment variables for "SAUCE_TUNNEL_NAME".\n' && return 2
  [[ -z ${binCheckJq} || -z ${binCheckCurl} ]] && printf '\nPlease ensure "curl" and "jq" are installed and in path.\n' && return 2
}


function sauce_get {
  protoHost="https://api.${SAUCE_REGION}.saucelabs.com"
  userKey="${SAUCE_USERNAME}:${SAUCE_ACCESS_KEY}" 
  r=$(curl  --request GET \
            --silent \
            --user ${userKey} \
            --write-out "\n%{http_code}" \
            --header "Accept: application/json" \
            ${protoHost}/${1})

  httpStatus="${r##*$'\n'}"
  [[ ${httpStatus} -le 199 && ${httpStatus} -ge 300 ]] && printf '\nRequest was not successfull.\n' && return

  r="${r%????}"
  jq --raw-output <<< "${r}"
}


function sauce_delete {
  protoHost="https://api.${SAUCE_REGION}.saucelabs.com"
  userKey="${SAUCE_USERNAME}:${SAUCE_ACCESS_KEY}" 
  r=$(curl  --request DELETE \
            --silent \
            --user ${userKey} \
            --write-out "\n%{http_code}" \
            --header "Content-Type: application/json" \
            ${protoHost}/${1})

  httpStatus="${r##*$'\n'}"
  [[ ${httpStatus} -le 199 && ${httpStatus} -ge 300 ]] && printf '\nRequest was not successfull.\n' && return
  r="${r%????}"
  jq --arg httpStatus $httpStatus \
     --raw-output '. += {"httpStatus": $httpStatus}' <<< "${r}"
}


# this function will return tunnels started by the named user
#   this ensures the account running these commands is authorized to stop the tunnel
#
function tunnels_info_get {
  method="rest/v1/${SAUCE_USERNAME}/tunnels?full=true"
  sauce_get ${method}
}


# this function will return all tunnels
#   this can be useful for visibility
function tunnels_info_get_all {
  method="rest/v1/${SAUCE_USERNAME}/tunnels?all=true&full=true"
  sauce_get ${method} |jq --raw-output '.[]'
}


function tunnel_id_get_by_name {
  tunnel_pre_flight
  r=$(tunnels_info_get)
  jq --raw-output '.[] |select(.tunnel_identifier == env.SAUCE_TUNNEL_NAME)|select(.status == "running") |.id' <<< "${r}"
}


function tunnel_metadata_get_so_runid_by_extra {
  tunnel_pre_flight
  r=$(tunnels_info_get)
  jq --raw-output '.[] |select(.tunnel_identifier == env.SAUCE_TUNNEL_NAME) |select(.status == "running") |.metadata.extra.runID' <<< "${r}"
}


function tunnel_metadata_get_so_runid_by_hostname {
  tunnel_pre_flight
  r=$(tunnels_info_get)
  r=$(jq --raw-output '.[] |select(.tunnel_identifier == env.SAUCE_TUNNEL_NAME) |select(.status == "running") |.metadata.hostname' <<< "${r}")
  printf '%s\n' ${r%%-*} 
}


function tunnel_stop_by_name {
  tunnel_pre_flight
  sauceTunnelId=$(tunnel_id_get_by_name ${SAUCE_TUNNEL_NAME})
  [[ -z ${sauceTunnelId} ]] && { printf 'ERROR: No tunnel identifier found for tunnel name "%s".\n' ${SAUCE_TUNNEL_NAME}; return 1; }
  method="rest/v1/${SAUCE_USERNAME}/tunnels/${sauceTunnelId}"
  sauce_delete ${method}
}
